Mmain	main.c	?^main(argc, argv)$?
OYcopy	yycopy.c	?^OYcopy ()$?
Perror	subr.c	?^Perror(file, error)$?
_strout	printf.c	?^_strout(count, string, adjust, foo, fillch)$?
addlist	yytree.c	?^addlist(vroot, new)$?
align	yycomm.c	?^align(cp)$?
alloc	subr.c	?^alloc(size)$?
alph	rval.c	?^#define alph(c)		((c >= 'a' && c <= 'z') || (c >= ?
alph	yy.h	?^#define alph(c)		((c >= 'a' && c <= 'z') || (c >= ?
any	subr.c	?^any(cp, ch)$?
arycod	lval.c	?^arycod(el)$?
asgnop	stat.c	?^asgnop(r)$?
asrtop	stat.c	?^asrtop(s)$?
at	doprnt.c	?^addp4 $10,8(sp),$10,(sp)	# 2*[n/2] in packed, at (?
baroff	pmon.c	?^baroff()$?
baron	pmon.c	?^baron()$?
brerror	yyerror.c	?^brerror(where, what)$?
cPANIC	pmon.c	?^cPANIC()$?
call	call.c	?^call(p, argv)$?
caseop	case.c	?^caseop(r)$?
ceil	doprnt.c	?^getman:	addl2 $9,r2			# -ceil(log10(x)) + 9$?
cerror	error.c	?^cerror(a1, a2, a3, a4)$?
charname	yyprint.c	?^charname(ch , which )$?
clrb	doprnt.c	?^clrb (r5)			# flag end$?
cmpb	doprnt.c	?^cmpb (r1)+,$'+$?
cntof	pmon.c	?^long cntof(pxc)$?
cnttab	pmon.c	?^cnttab(s, no)$?
commform	yy.h	?^#define	commform()	quickcomm(CFORM)$?
commincl	yycomm.c	?^commincl(cp, ch)$?
commnl	yy.h	?^#define	commnl()	quickcomm(CNL)$?
commnlbl	yy.h	?^#define	commnlbl()	quickcomm(CNLBL)$?
const	const.c	?^const(cline, cid, cdecl)$?
constbeg	const.c	?^constbeg(l, cline)$?
constend	const.c	?^constend()$?
copy	subr.c	?^copy(to, from, bytes)$?
copyfile	yymain.c	?^copyfile()$?
copystr	tree.c	?^copystr(token)$?
correct	yyrecover.c	?^correct(fchar, origin, c, multvec, Ps0, Pv0)$?
cset	cset.c	?^cset(r)$?
dashes	pp.c	?^dashes(c)$?
defnl	nl.c	?^defnl(sym, cls, typ, val)$?
delcost	yycosts.c	?^delcost(what)$?
digit	yy.h	?^#define digit(c)	(c >= '0' && c <= '9')$?
do	doprnt.c	?^jleq eg				# so do (w+5) <= exp$?
dotted	subr.c	?^dotted(fp, c)$?
dumpnl	nl.c	?^dumpnl(to, rout)$?
enter	nl.c	?^enter(np)$?
error	error.c	?^error(a1, a2, a3, a4)$?
esavestr	string.c	?^esavestr(cp)$?
field	rec.c	?^field(r, v)$?
fixlist	yytree.c	?^fixlist(vroot)$?
flush	pp.c	?^flush()$?
flushcm	yycomm.c	?^flushcm()$?
forop	stat.c	?^forop(r)$?
funcbody	fdec.c	?^funcbody(fp)$?
funccod	func.c	?^funccod(r)$?
funcend	fdec.c	?^funcend(fp, bundle, binfo)$?
funcfwd	fdec.c	?^funcfwd(fp)$?
funchdr	fdec.c	?^funchdr(r)$?
gconst	const.c	?^gconst(r)$?
getcm	yycomm.c	?^getcm(cmdelim)$?
getcmline	yycomm.c	?^getcmline(cmdelim)$?
getcnt	pmon.c	?^getcnt()$?
getcore	pmon.c	?^getcore(fp)$?
getit	pmon.c	?^getit(fp)$?
getline	yyget.c	?^getline()$?
getpmon	pmon.c	?^getpmon(fp)$?
gettime	subr.c	?^gettime()$?
gotoop	lab.c	?^gotoop(s)$?
graphic	yyput.c	?^graphic(ch)$?
gtype	type.c	?^gtype(r)$?
hash	hash.c	?^int *hash(s, save)$?
hdefnl	nl.c	?^hdefnl(sym, cls, typ, val)$?
header	main.c	?^header()$?
identis	yyid.c	?^identis(cp, kind)$?
ifop	stat.c	?^ifop(r)$?
includ	yyget.c	?^includ()$?
indent	pp.c	?^indent()$?
indent1	pp.c	?^indent1(in)$?
indentlab	pp.c	?^indentlab()$?
inithash	hash.c	?^inithash()$?
initnl	nl.c	?^initnl()$?
inittree	tree.c	?^inittree()$?
inpflist	subr.c	?^inpflist(fp)$?
inscost	yycosts.c	?^inscost(sy, before)$?
label	lab.c	?^label(r, l)$?
labeled	lab.c	?^labeled(s)$?
line2of	y.tab.c	?^#define	line2of(l)	l$?
line2of	yycomm.c	?^line2of(l)$?
lineNof	yycomm.c	?^lineNof(l, i)$?
lineof	y.tab.c	?^#define	lineof(l)	l$?
lineof	yycomm.c	?^lineof(l)$?
linopr	pp.c	?^linopr()$?
loccor	yyrecover.c	?^loccor(ps, ntok)$?
lvalue	lval.c	?^lvalue(r)$?
magic	yymain.c	?^magic()$?
magic2	yymain.c	?^magic2()$?
moval	doprnt.c	?^moval (width)[width],width	# width *= 5;$?
movb	doprnt.c	?^L1:	movb (r11)+,width		# next character of format$?
movd	doprnt.c	?^movd (ap)+,r5$?
movl	doprnt.c	?^L20:	movl (ap)+,r2			# addr first byte$?
myctime	subr.c	?^myctime(tv)$?
needtree	yycomm.c	?^needtree()$?
newcomm	yycomm.c	?^newcomm(cp)$?
newlist	yytree.c	?^newlist(new)$?
nlcopy	nl.c	?^nlcopy(p)$?
nlfree	nl.c	?^nlfree(p)$?
nloff	nl.c	?^nloff(p)$?
noblank	yycomm.c	?^noblank(i)$?
noprint	pp.c	?^#define noprint() nopflg$?
nowcnt	pmon.c	?^long nowcnt()$?
nowcntr	pmon.c	?^nowcntr()$?
nullsem	yyseman.c	?^nullsem(ch)$?
oneline	yycomm.c	?^oneline(margin, cml)$?
onintr	main.c	?^onintr()$?
opop	subr.c	?^opop(c)$?
opt	0.h	?^#define opt(c) opts[c-'a']$?
opush	subr.c	?^opush(c)$?
outerr	pp.c	?^outerr()$?
packtree	yycomm.c	?^packtree()$?
panic	error.c	?^panic(s)$?
pexit	main.c	?^pexit(c)$?
pmnospac	pmon.c	?^pmnospac()$?
pmread	pmon.c	?^pmread()$?
ppbra	pp.c	?^ppbra(s)$?
ppgoin	pp.c	?^ppgoin(lv)$?
ppgoout	pp.c	?^ppgoout(lv)$?
ppid	pp.c	?^ppid(s)$?
ppitem	pp.c	?^ppitem()$?
ppket	pp.c	?^ppket(s)$?
ppkw	pp.c	?^ppkw(s)$?
pplab	pp.c	?^pplab(s)$?
ppnl	pp.c	?^ppnl()$?
ppnumb	pp.c	?^ppnumb(s)$?
ppop	pp.c	?^ppop(s)$?
pppay	pp.c	?^pppay()$?
ppsep	pp.c	?^ppsep(s)$?
ppsname	fdec.c	?^ppsname(fp)$?
ppsnl	pp.c	?^ppsnl()$?
ppsnlb	pp.c	?^ppsnlb()$?
ppspac	pp.c	?^ppspac()$?
ppstbl	stat.c	?^ppstbl(r, m)$?
ppstbl1	stat.c	?^ppstbl1(r, m)$?
ppstbl2	stat.c	?^ppstbl2()$?
ppstdo	stat.c	?^ppstdo(r, l)$?
ppstr	pp.c	?^ppstr(s)$?
pptab	pp.c	?^pptab()$?
ppunspac	pp.c	?^ppunspac()$?
prec	rval.c	?^prec(r)$?
printf	printf.c	?^printf(fmt, args)$?
printoff	pp.c	?^printoff()$?
printon	pp.c	?^printon()$?
proc	proc.c	?^proc(r)$?
prttab	pmon.c	?^prttab()$?
putchar	pp.c	?^putchar(c)$?
putcm	yycomm.c	?^putcm()$?
putcml	yycomm.c	?^putcml()$?
putcmp	yycomm.c	?^putcmp()$?
puthedr	main.c	?^puthedr()$?
putone	yycomm.c	?^putone(cp)$?
quickcomm	yycomm.c	?^quickcomm(t)$?
quit	0.h	?^#define	quit()		setpfx('Q')$?
readch	yyget.c	?^readch()$?
recovered	0.h	?^#define	recovered()	setpfx('e')$?
repcost	yycosts.c	?^repcost(what, with)$?
repop	stat.c	?^repop(r)$?
rescnt	pmon.c	?^rescnt(pxc)$?
rvalue	rval.c	?^rvalue(r, par)$?
savecnt	pmon.c	?^savecnt(pxc)$?
savestr	string.c	?^savestr(cp)$?
setcnt	pmon.c	?^setcnt(l)$?
setinfo	yycomm.c	?^setinfo(ip)$?
setline	yycomm.c	?^setline(ip)$?
setpfx	0.h	?^#define	setpfx(x)	errpfx = x$?
setprint	pp.c	?^setprint()$?
setuflg	yylex.c	?^setuflg()$?
setupvar	yytree.c	?^setupvar(var, init)$?
shudpcnt	pmon.c	?^shudpcnt()$?
skipbl	yyget.c	?^skipbl(ocp)$?
standard	0.h	?^#define	standard()	setpfx('s')$?
statement	stat.c	?^statement(r)$?
statlist	stat.c	?^statlist(r)$?
togopt	subr.c	?^togopt(c)$?
tokname	yyprint.c	?^tokname(tp , which )$?
tralloc	tree.c	?^tralloc(howmuch)$?
tree	tree.c	?^int *tree(cnt, a)$?
tree1	treen.c	?^tree1 ( arg1 )$?
tree2	treen.c	?^tree2 ( arg1 , arg2 )$?
tree3	treen.c	?^tree3 ( arg1 , arg2 , arg3 )$?
tree4	treen.c	?^tree4 ( arg1 , arg2 , arg3 , arg4 )$?
tree5	treen.c	?^tree5 ( arg1 , arg2 , arg3 , arg4 , arg5 )$?
trfree	tree.c	?^trfree()$?
trystate	yyrecover.c	?^trystate(Ps0, Pv0, flag, insmult, delmult, repmult?
tyary	type.c	?^tyary(r)$?
type	type.c	?^type(tline, tid, tdecl)$?
typebeg	type.c	?^typebeg(l, tline)$?
typeend	type.c	?^typeend()$?
tyrang	type.c	?^tyrang(r)$?
tyrec	rec.c	?^tyrec(r, p0)$?
tyscal	type.c	?^tyscal(r)$?
uninclud	yyget.c	?^uninclud()$?
unprint	pmon.c	?^unprint()$?
unyylex	yylex.c	?^unyylex(y)$?
var	var.c	?^var(vline, vidl, vtype)$?
varbeg	var.c	?^varbeg(l, vline)$?
varend	var.c	?^varend()$?
variant	rec.c	?^variant(r)$?
warning	0.h	?^#define	warning()	setpfx('w')$?
whilop	stat.c	?^whilop(r)$?
withop	stat.c	?^withop(s)$?
writef	yymain.c	?^writef(i, cp)$?
yerror	yyerror.c	?^yerror(s, a1, a2, a3, a4, a5)$?
yyEactr	y.tab.c	?^yyEactr(__np__, var)$?
yyPerror	yypanic.c	?^yyPerror(cp, kind)$?
yySsync	yyput.c	?^yySsync()$?
yyactr	y.tab.c	?^yyactr(__np__){$?
yybadref	yyid.c	?^yybadref(p, line)$?
yybaduse	yyid.c	?^yybaduse(cp, line, kindmask)$?
yycosts	yycosts.c	?^yycosts()$?
yydocost	yycosts.c	?^yydocost(c)$?
yyexeof	yyrecover.c	?^yyexeof()$?
yyflush	yyput.c	?^yyflush()$?
yygetline	yyput.c	?^yygetline(efile, seekp, eline, eseqid)$?
yyidok	yyid.c	?^yyidok(p, kind)$?
yyidok1	yyid.c	?^yyidok1(p, kind)$?
yyisvar	yyid.c	?^yyisvar(p, class)$?
yylex	yylex.c	?^yylex()$?
yymain	yymain.c	?^yymain()$?
yyoutfl	yyput.c	?^yyoutfl(toseqid)$?
yyoutline	yyput.c	?^yyoutline()$?
yyparse	yyparse.c	?^yyparse()$?
yyprintf	yyput.c	?^yyprintf(cp, line)$?
yyprline	yyput.c	?^yyprline(buf, line, file, id)$?
yyputfn	yyput.c	?^yyputfn(cp)$?
yyrecover	yyrecover.c	?^yyrecover(Ps0, idfail)$?
yyresume	yy.h	?^#define	yyresume()	yyResume = 1;$?
yyretrieve	yyput.c	?^yyretrieve()$?
yyset	yylex.c	?^yyset()$?
yysetfile	yyput.c	?^yysetfile(file)$?
yysync	yyput.c	?^yysync()$?
yyunexeof	yyrecover.c	?^yyunexeof()$?
zer	doprnt.c	?^	movaw -ch.zer(r0)[width],width	# width = 2*witdh ?
